// Globals
global function RiffLmaoBox_Init 

global int healthAmount = GetConVarInt("lmao_defaulthealth")
global int reserveRefillAmount = GetConVarInt("lmao_reserverefillamount")
global int clipRefillAmount = GetConVarInt("lmao_cliprefillamount")

global string ordinanceReplacement = GetConVarString("lmao_ordinancereplacement")
global string bannedTacticalsStr = GetConVarString("lmao_bannedtacticals")
global string tacticalReplacement = GetConVarString("lmao_tacticalreplacement")
global string messageBannedTactical = GetConVarString("lmao_messagebannedtactical")
global string messageRespawn = GetConVarString("lmao_messagerespawn")

global bool enableHudMessages = GetConVarBool("lmao_enablehudmessages")
global bool replaceBannedTactical = GetConVarBool("lmao_replacebannedtactical")
global bool replaceOrdinance = GetConVarBool("lmao_replaceordinance")
global bool refillClipOnKill = GetConVarBool("lmao_refillcliponkill")
global bool refillReserveOnKill = GetConVarBool("lmao_refillreserveonkill")


#if SERVER
struct {
    table<entity, int> playerWeapons
} file
#endif

void function RiffLmaoBox_Init()
{
    AddPrivateMatchModeSettingEnum( "#MODE_SETTING_CATEGORY_RIFF", "LMAOBox", [ "#SETTING_DISABLED", "#SETTING_ENABLED" ], "0" )

    #if SERVER
	if ( GetCurrentPlaylistVarInt( "LMAOBox", 0 ) == 0 )
		return

	SetLoadoutGracePeriodEnabled( false )
	SetWeaponDropsEnabled( false )

	AddCallback_OnPlayerRespawned( LmaoboxSetWeapons )
	AddCallback_OnPlayerKilled( LmaoboxGiveAmmo )
	#endif


}

#if SERVER
void function LmaoboxSetWeapons( entity player )
{
	

	array<string> bannedTacticals = split( bannedTacticalsStr, "," )
	
	if ( enableHudMessages == true ) {
		SendHudMessage( player, messageRespawn, -1, 0.8, 255, 255, 255, 0, 0.15, 4, 0.15 )
	}
	player.SetMaxHealth( healthAmount )

    foreach( entity weapon in player.GetMainWeapons() ) {
		player.TakeWeaponNow( weapon.GetWeaponClassName() )
	}
	if ( replaceOrdinance == true ) {
		player.TakeWeaponNow( player.GetOffhandWeapon( OFFHAND_RIGHT ).GetWeaponClassName() )
		if ( ordinanceReplacement == "mp_weapon_grenade_sonar" && HasOffhandWeapon( player, "mp_weapon_grenade_sonar" ) ) {
			player.TakeWeaponNow( player.GetOffhandWeapon( OFFHAND_LEFT ).GetWeaponClassName() )
			player.GiveOffhandWeapon( "mp_ability_grapple", OFFHAND_LEFT )
		}
		player.GiveOffhandWeapon( ordinanceReplacement, OFFHAND_RIGHT )
	}
	if ( HasOffhandWeapon( player, "mp_ability_holopilot" ) && enableHudMessages == true ) {
		SendHudMessage( player, "This is a certified Holo Pilot moment.", -1, 0.8, 105, 119, 144, 0, 0.15, 4, 0.15 )
	}

	foreach ( string bannedTacticalItem in bannedTacticals ) {
		if ( HasOffhandWeapon( player, bannedTacticalItem ) ) {
			player.TakeWeaponNow( player.GetOffhandWeapon( OFFHAND_LEFT ).GetWeaponClassName() )
			if ( enableHudMessages == true ) {
				SendHudMessage( player, messageBannedTactical, -1, 0.8, 255, 0, 0, 0, 0.15, 4, 0.15 )
			}
			if ( replaceBannedTactical == true and tacticalReplacement != "") {
				player.GiveOffhandWeapon( tacticalReplacement, OFFHAND_LEFT )
			}
		}
	}

	player.GiveWeapon( "mp_weapon_smart_pistol" )
}

void function LmaoboxGiveAmmo( entity victim, entity attacker, var damageInfo )
{
	if ( !victim.IsPlayer() || !attacker.IsPlayer() || victim == attacker ) {
		return
	}
	
	foreach ( entity weapon in attacker.GetMainWeapons() ) {
		if ( refillClipOnKill == true ) {
			weapon.SetWeaponPrimaryClipCount(clipRefillAmount)
		}
		if ( refillReserveOnKill == true ) {
			weapon.SetWeaponPrimaryAmmoCount(reserveRefillAmount)
		}
	}
}
#endif