// Globals
global function RiffLmaoBox_Init 

global int healthAmount
global int reserveRefillAmount
global int clipRefillAmount

global string ordinanceReplacement
global string bannedTacticalsStr
global string tacticalReplacement
global string messageBannedTactical
global string messageRespawn

global bool enableHudMessages
global bool replaceBannedTactical
global bool replaceOrdinance
global bool refillClipOnKill
global bool refillReserveOnKill


#if SERVER
struct {
    table<entity, int> playerWeapons
} file
#endif

void function RiffLmaoBox_Init()
{
	healthAmount = GetConVarInt("lmao_defaulthealth")
	reserveRefillAmount = GetConVarInt("lmao_reserverefillamount")
	clipRefillAmount = GetConVarInt("lmao_cliprefillamount")
	ordinanceReplacement = GetConVarString("lmao_ordinancereplacement")
	bannedTacticalsStr = GetConVarString("lmao_bannedtacticals")
	tacticalReplacement = GetConVarString("lmao_tacticalreplacement")
	messageBannedTactical = GetConVarString("lmao_messagebannedtactical")
	messageRespawn = GetConVarString("lmao_messagerespawn")
	messageOnKill = GetConVarString("lmao_messageonkill")
	messageOnDie = GetConVarString("lmao_messageondie")
	enableHudMessages = GetConVarBool("lmao_enablehudmessages")
	replaceBannedTactical = GetConVarBool("lmao_replacebannedtactical")
	replaceOrdinance = GetConVarBool("lmao_replaceordinance")
	refillClipOnKill = GetConVarBool("lmao_refillcliponkill")
	refillReserveOnKill = GetConVarBool("lmao_refillreserveonkill")

    AddPrivateMatchModeSettingEnum( "#MODE_SETTING_CATEGORY_RIFF", "riff_lmaobox", [ "#SETTING_DISABLED", "#SETTING_ENABLED" ], "0" )

    #if SERVER
	if ( GetCurrentPlaylistVarInt( "riff_lmaobox", 0 ) == 0 )
		return

	SetLoadoutGracePeriodEnabled( false )
	SetWeaponDropsEnabled( false )

	AddCallback_OnPlayerRespawned( LmaoboxSetWeapons )
	AddCallback_OnPlayerKilled( LmaoboxGiveAmmo )
	#endif


}

#if SERVER
void function LmaoboxSetWeapons( entity player )
{

	array<string> bannedTacticals = split( bannedTacticalsStr, "," )
	
	if ( enableHudMessages == true ) {
		SendHudMessage( player, messageRespawn, -1, 0.8, 255, 255, 255, 0, 0.15, 4, 0.15 )
	}
	player.SetMaxHealth( healthAmount )

    foreach( entity weapon in player.GetMainWeapons() ) {
		player.TakeWeaponNow( weapon.GetWeaponClassName() )
	}
	if ( replaceOrdinance == true ) {
		player.TakeWeaponNow( player.GetOffhandWeapon( OFFHAND_RIGHT ).GetWeaponClassName() )
		if ( ordinanceReplacement == "mp_weapon_grenade_sonar" && HasOffhandWeapon( player, "mp_weapon_grenade_sonar" ) ) {
			player.TakeWeaponNow( player.GetOffhandWeapon( OFFHAND_LEFT ).GetWeaponClassName() )
			player.GiveOffhandWeapon( "mp_ability_grapple", OFFHAND_LEFT )
		}
		player.GiveOffhandWeapon( ordinanceReplacement, OFFHAND_RIGHT )
	}
	if ( HasOffhandWeapon( player, "mp_ability_holopilot" ) && enableHudMessages == true ) {
		SendHudMessage( player, "This is a certified Holo Pilot moment.", -1, 0.8, 105, 119, 144, 0, 0.15, 4, 0.15 )
	}

	foreach ( string bannedTacticalItem in bannedTacticals ) {
		if ( HasOffhandWeapon( player, bannedTacticalItem ) ) {
			player.TakeWeaponNow( player.GetOffhandWeapon( OFFHAND_LEFT ).GetWeaponClassName() )
			if ( enableHudMessages == true ) {
				SendHudMessage( player, messageBannedTactical, -1, 0.8, 255, 0, 0, 0, 0.15, 4, 0.15 )
			}
			if ( replaceBannedTactical == true && tacticalReplacement != "") {
				player.GiveOffhandWeapon( tacticalReplacement, OFFHAND_LEFT )
			}
		}
	}

	player.GiveWeapon( "mp_weapon_smart_pistol" )
}

void function LmaoboxGiveAmmo( entity victim, entity attacker, var damageInfo )
{
	if ( !victim.IsPlayer() || !attacker.IsPlayer() || victim == attacker ) {
		return
	}

	if ( enableHudMessages == true ) {
		SendHudMessage( victim, messageOnDie, -1, 0.8, 255, 0, 0, 0, 0.15, 4, 0.15 )
		SendHudMessage( attacker, messageOnKill, -1, 0.8, 0, 255, 0, 0, 0.15, 4, 0.15 )
	}
	
	foreach ( entity weapon in attacker.GetMainWeapons() ) {
		if ( refillClipOnKill == true ) {
			int toSet = weapon.GetWeaponPrimaryClipCount() + clipRefillAmount + 1
			if ( toSet > 12 ) {
				toSet = 12
			}
			weapon.SetWeaponPrimaryClipCount( toSet )
		}
		if ( refillReserveOnKill == true ) {
			weapon.SetWeaponPrimaryAmmoCount(reserveRefillAmount)
		}
	}
}
#endif